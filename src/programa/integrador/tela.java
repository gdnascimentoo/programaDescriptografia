
package programa.integrador;

import java.util.Base64;
import javax.swing.JOptionPane;

/**
 *
 * @author jvealuno
 */
public class tela extends javax.swing.JFrame {

    /**
     * Creates new form tela
     */
    public tela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ordem = new javax.swing.ButtonGroup();
        binario = new javax.swing.JRadioButton();
        morse = new javax.swing.JRadioButton();
        base64 = new javax.swing.JRadioButton();
        cesar = new javax.swing.JRadioButton();
        lingua = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        nor = new javax.swing.JEditorPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        cod = new javax.swing.JEditorPane();
        trad = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        pbinario = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pmorse = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pbase64 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        pcesar = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        lingua.add(binario);
        binario.setText("binario");

        lingua.add(morse);
        morse.setText("jRadioButton4");

        lingua.add(base64);
        base64.setText("jRadioButton5");

        lingua.add(cesar);
        cesar.setText("jRadioButton6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tradutor de codificações");
        setPreferredSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane4.setViewportView(nor);

        jScrollPane5.setViewportView(cod);

        trad.setText("Traduzir");
        trad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradActionPerformed(evt);
            }
        });

        ordem.add(jRadioButton1);
        jRadioButton1.setText("Codificar");

        ordem.add(jRadioButton2);
        jRadioButton2.setText("Descodificar");

        pbinario.setBackground(new java.awt.Color(255, 0, 51));
        pbinario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbinarioMouseClicked(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Binário");

        javax.swing.GroupLayout pbinarioLayout = new javax.swing.GroupLayout(pbinario);
        pbinario.setLayout(pbinarioLayout);
        pbinarioLayout.setHorizontalGroup(
            pbinarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pbinarioLayout.setVerticalGroup(
            pbinarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pmorse.setBackground(new java.awt.Color(0, 255, 0));
        pmorse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pmorseMouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Morse");

        javax.swing.GroupLayout pmorseLayout = new javax.swing.GroupLayout(pmorse);
        pmorse.setLayout(pmorseLayout);
        pmorseLayout.setHorizontalGroup(
            pmorseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pmorseLayout.setVerticalGroup(
            pmorseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pbase64.setBackground(new java.awt.Color(255, 255, 102));
        pbase64.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbase64MouseClicked(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Base64");

        javax.swing.GroupLayout pbase64Layout = new javax.swing.GroupLayout(pbase64);
        pbase64.setLayout(pbase64Layout);
        pbase64Layout.setHorizontalGroup(
            pbase64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pbase64Layout.setVerticalGroup(
            pbase64Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        pcesar.setBackground(new java.awt.Color(102, 204, 0));
        pcesar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pcesarMouseClicked(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Cifra de César");

        javax.swing.GroupLayout pcesarLayout = new javax.swing.GroupLayout(pcesar);
        pcesar.setLayout(pcesarLayout);
        pcesarLayout.setHorizontalGroup(
            pcesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );
        pcesarLayout.setVerticalGroup(
            pcesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("Chave da cifra");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbinario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pmorse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(pbase64, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(pcesar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(trad, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                        .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jRadioButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pcesar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(pmorse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pbinario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pbase64, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(trad)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton1)
                                .addGap(15, 15, 15)
                                .addComponent(jRadioButton2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradActionPerformed
                               
        String bmalf[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10","11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63"};
        String alfbm[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "+", "/"};
        String ascii[] = {"65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "43", "48"};
        String malf[] = {".-", "-...", "-.-.", "-..",".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----"};
        String alfn[] = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", ".", ",", "ç", "Ç", "´", "`", "^", "~", "!", "?"};
        String balf[] = {"01000001", "01000010", "01000011", "01000100", "01000101", "01000110", "01000111", "01001000", "01001001", "01001010", "01001011", "01001100", "01001101", "01001110", "01001111", "01010000", "01010001", "01010010", "01010011", "01010100", "01010101", "01010110", "01010111", "01011000", "01011001", "01011010","01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010","00110001", "00100000", "00110010", "00100000", "00110011", "00100000", "00110100", "00100000", "00110101", "00100000", "00110110", "00100000", "00110111", "00100000", "00111000", "00100000", "00111001", "00100000", "00110000",  "00101110", "00101100", "11100111", "11000111", "10110100", "01100000", "01011110", "01111110", "00100001", "00111111"};
        String alf[] = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
        String alfnn[] = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z","0", "1", "2", "3","4","5","6","7","8","9"};
        String bmb[] = {"000000","000001","000010","000011","000100","000101","000110","000111","001000","001001","001010","001011","001100","001101","001110","001111","010000","010001","010010","010011","010100","010101","010110","010111","011000","011001","011010","011011","011100","011101","011110","011111","100000","100001","100010","100011","100100","100101","100110","100111","101000","101001","101010","101011","101100","101101","101110","101111","110000","110001","110010","110011","110100","110101","110110","110111","111000","111001","111010","111011","111100","111101","111110"}; // 0 a 63
        String basci[] = {"01000001", "01000010", "01000011", "01000100", "01000101", "01000110", "01000111", "01001000", "01001001", "01001010", "01001011", "01001100", "01001101", "01001110", "01001111", "01010000", "01010001", "01010010", "01010011", "01010100", "01010101", "01010110", "01010111", "01011000", "01011001", "01011010", "01100001", "01100010", "01100011", "01100100", "01100101", "01100110", "01100111", "01101000", "01101001", "01101010", "01101011", "01101100", "01101101", "01101110", "01101111", "01110000", "01110001", "01110010", "01110011", "01110100", "01110101", "01110110", "01110111", "01111000", "01111001", "01111010", "0110000", "0110001", "0110010", "00110011", "0110100", "00110101", "00110110", "00110111", "00111000", "00111001", "00101011", "00101111"};// bmalf em binario
        
        //65-90
        System.out.println(alfn.length);
        System.out.println(balf.length);
        String basico = nor.getText();
        String codigo = cod.getText();
        
        if (jRadioButton1.isSelected() == true) {
            codigo = "";
            String verf;
            switch(x) {
            
            case 0:
                
                for (int i = 0; i < basico.length(); i++) {
                    int xi = 0;

                    for (String v: alfn) {
                        System.out.println(xi);
                        verf = "";
                        verf += basico.charAt(i);
                        if (verf.equals(v)) {
                            System.out.println(basico);
                            codigo += balf[xi];
                            codigo += "  ";
                        }else if ((basico.charAt(i) == ' ') && (xi == 0)){
                            codigo += " 00100000 ";
                            xi++;
                        
                        }else {
                            xi++;
                        }
                        
                    }
                }
                cod.setText(codigo);
                break;                
                
                
            case 1:
                
                for (int i = 0; i < basico.length(); i++) {
                    int xi = 0;

                    for (String v: alfnn) {
                        verf = "";
                        verf += basico.charAt(i);
                        if (verf.equalsIgnoreCase(v)) {
                            codigo += malf[xi];
                            codigo += "  ";
                            break;
                        }else if ((basico.charAt(i) == ' ') && (xi == 0)){
                            codigo += " / ";
                            xi++;
                            break;
                        }
                        
                        else {
                            xi++;
                        }
                        
                    }
                }
                cod.setText(codigo);
                break;
            case 2:
                //String traduzido = DatatypeConverter.printBase64Binary(nor.getText().getBytes());
            	String traduzido = (Base64.getDecoder().decode(nor.getText().getBytes())).toString();
                cod.setText(traduzido);
                break;
            case 3:

                if (key.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Insira uma chave para a cifra!");
                } else if ((Integer.parseInt(key.getText()) > 26) || (Integer.parseInt(key.getText()) < 1)){
                    JOptionPane.showMessageDialog(null, "Insira um numero válido!");
                }else if ((Integer.parseInt(key.getText()) < 26) && (Integer.parseInt(key.getText()) >= 1)) {
                    
                    int c = Integer.parseInt(key.getText());
                    
                    for(int i = 0; i < basico.length(); i++) {
                        
                        int xi = 0;
                        
                        verf = "";
                        verf += basico.charAt(i);
                        
                        for(String v: alfnn) {
                            
                            if (v.equalsIgnoreCase(verf)) {
                                if ((c + xi) < 26) {
                                codigo += alf[xi + c];
                                }else {
                                    codigo += alf[xi + c - 26];
                                }
                                
                                xi++;
                                break;
                            } else if ((verf.equals(" ")) && (xi == 0)) {
                                codigo += " ";
                                xi++;
                                break;
                            } else if (xi == 25){
                                codigo += verf;
                                break;
                            } else {
                                xi++;
                            }
                                
                        }
                    }
                    
                }
                else {
                    JOptionPane.showMessageDialog(null, "Insira uma chave válida!");
                }
                cod.setText(codigo);
                
                
                
                break;
            default:
                break;
            
        }
        } else if (jRadioButton2.isSelected() == true) {
            int po = 0;
            basico = "";
            switch(x) {
            
            case 0:
                while(!(codigo.equals(""))){
                
                String twt = "";
                for (int i = 0; po < codigo.length(); po++){
                    System.out.println(po);
                    if (codigo.charAt(po) == ' '){
                        po++;
                        break;
                    }else{
                    twt += codigo.charAt(po);
                    }
                }
                int xo = 0;
                for(String v:balf){
                    
                    if (v.equals(twt)){
                        basico += alfn[xo];
                        break;
                    } else if(twt.equals("00100000")) {
                        basico += " ";
                        break;
                    }else {
                        xo++;
                    }
                    
                }
                nor.setText(basico);
                if (po >= codigo.length()){
                    break;
                }
                }
                break;
            case 1:
                boolean verificado = false;
                String twt = "";
                int poo = 0;
                for (int o = 0; poo < codigo.length(); poo++){
                    if ((codigo.charAt(poo) != '/') && (codigo.charAt(poo) != ' ')){
                    twt += codigo.charAt(poo);
                    
                    verificado = false;
                    }else if (codigo.charAt(poo) == ' '){
                        
                        int xe = 0;
                        if (verificado == false){
                            System.out.println(twt);
                            for (String V:malf){
                            
                            if (V.equals(twt)){
                            
                                basico += alfnn[xe];
                                twt = "";
                            }
                            
                            xe++;
                        
                        }
                        verificado = true;
                        } 
                       
                    } else {
                        basico += " ";
                        
                    }
                    
                }
                nor.setText(basico);
                break;
            case 2:
                JOptionPane.showMessageDialog(null, "Essa opção não está disponível para Base64.");
                break;
            case 3:
                if (key.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Insira uma chave para a cifra!");
                } else if ((Integer.parseInt(key.getText()) > 26) || (Integer.parseInt(key.getText()) < 1)){
                    JOptionPane.showMessageDialog(null, "Insira um numero válido!");
                }else if ((Integer.parseInt(key.getText()) < 26) && (Integer.parseInt(key.getText()) >= 1)) {
                    
                    int c = Integer.parseInt(key.getText());
                    
                    for(int i = 0; i < codigo.length(); i++) {
                        
                        int xi = 0;
                        
                        String st = "";
                        st += codigo.charAt(i);
                        
                        for(String v: alfnn) {
                            
                            if (v.equalsIgnoreCase(st)) {
                                if ((xi - c) >= 0) {
                                basico += alf[xi - c];
                                }else {
                                    System.out.println(xi - c);
                                basico += alf[xi - c + 26];
                                }
                                
                                xi++;
                                break;
                            } else if ((st.equals(" ")) && (xi == 0)) {
                                basico += " ";
                                xi++;
                                break;
                            } else if (xi == 25){
                                basico += st;
                                break;
                            } else {
                                xi++;
                            }
                                
                        }
                    }
                nor.setText(basico);
                }
                break;
            default:
                break;
        }
        } else {
            JOptionPane.showMessageDialog(null, "Escolha se você quer traduzir ou codificar!");
        }
        
        
    }//GEN-LAST:event_tradActionPerformed
int x = -1;
    private void pbinarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbinarioMouseClicked
        key.setVisible(false);
        jLabel1.setVisible(false);         
        cod.setText("");
        
        System.out.println("binario");
        binario.setSelected(true);
        x = 0;
        
        
    }//GEN-LAST:event_pbinarioMouseClicked

    private void pmorseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pmorseMouseClicked
        key.setVisible(false);
        jLabel1.setVisible(false);         
        cod.setText("");
        
        System.out.println("morse");
        morse.setSelected(true);
        x = 1;
    }//GEN-LAST:event_pmorseMouseClicked

    private void pbase64MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbase64MouseClicked
        key.setVisible(false);
        jLabel1.setVisible(false); 
        System.out.println("base64");
        base64.setSelected(true);
        x = 2;
        
        cod.setText("");
    }//GEN-LAST:event_pbase64MouseClicked

    private void pcesarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcesarMouseClicked
        key.setVisible(true);
        jLabel1.setVisible(true);
        
        System.out.println("cesar");
        cesar.setSelected(true);
        x = 3;
        
        cod.setText("");
    }//GEN-LAST:event_pcesarMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        key.setVisible(false);
        jLabel1.setVisible(false);        
        
    }//GEN-LAST:event_formWindowOpened


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton base64;
    private javax.swing.JRadioButton binario;
    private javax.swing.JRadioButton cesar;
    private javax.swing.JEditorPane cod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField key;
    private javax.swing.ButtonGroup lingua;
    private javax.swing.JRadioButton morse;
    private javax.swing.JEditorPane nor;
    private javax.swing.ButtonGroup ordem;
    private javax.swing.JPanel pbase64;
    private javax.swing.JPanel pbinario;
    private javax.swing.JPanel pcesar;
    private javax.swing.JPanel pmorse;
    private javax.swing.JButton trad;
    // End of variables declaration//GEN-END:variables
}
